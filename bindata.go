// Code generated by go-bindata.
// sources:
// templates/index.tmpl
// templates/norms.tmpl
// templates/square.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\xdf\x53\xe3\x36\x10\x7e\xcf\x5f\xa1\xaa\x8f\x1d\x5b\x07\xa1\x0d\x77\xa3\x78\x86\x86\x2b\x3f\x8e\x03\x8e\x70\xe1\xe8\xdb\x46\x92\x6d\x19\x59\x32\x92\x6c\xe2\x66\xf8\xdf\x3b\xb6\xe3\x80\x33\x94\xe9\xd3\x3d\x24\x92\x3e\xed\x6a\xf7\xfb\x56\x5e\xad\xd7\x88\x8b\x58\x6a\x81\xb0\xd4\x5c\xac\x42\x9f\x17\x0a\xa3\xe7\xe7\x11\x4d\x7d\xae\xa2\x11\x42\x34\x15\xc0\x9b\x09\x42\xd4\x4b\xaf\x44\xb4\x5e\xa3\xb0\x9d\xa1\xe7\x67\x4a\x3a\xac\xdb\xff\x25\x08\xd0\x05\x78\xe1\x3c\x62\x26\x2f\xa4\x12\x1c\x81\xe6\x28\x97\x5a\xc6\x52\x70\x34\x9b\xcf\x51\x10\x6c\xac\x95\xd4\x0f\xc8\x0a\x35\xc5\xce\xd7\x4a\xb8\x54\x08\x8f\x51\x6a\x45\x3c\xc5\xa9\xf7\x85\xfb\x44\x48\x0e\x2b\xc6\x75\xb8\x34\xc6\x3b\x6f\xa1\x68\x16\xcc\xe4\x64\x0b\x90\x71\x38\x0e\x27\x84\x39\xf7\x82\x85\xb9\xd4\x21\x73\x0e\x23\xa9\xbd\x48\xac\xf4\xf5\x14\xbb\x14\xc6\x87\x07\xc1\x9f\x8b\x7b\x29\xe7\x67\x7f\x89\x2f\x7b\xfc\x24\x3f\xbf\x39\x7a\xa8\x59\x79\x7a\x74\x7a\x93\x8c\xf7\xaf\xf2\xef\xec\xe9\x69\x62\xf4\xf8\xe6\x9e\x27\x07\x0b\xf8\xed\x3a\x9f\xdf\xba\x7f\xc8\x97\x3f\x0e\xab\x25\xff\x9c\xa5\x07\x25\x46\xcc\x1a\xe7\x8c\x95\x89\xd4\x53\x0c\xda\xe8\x3a\x37\xa5\xc3\xd1\xe8\x45\x83\xab\xc2\x4b\xa3\x41\x21\x9f\x8a\x5c\xfc\x04\xc6\x41\x1b\xe8\x3d\xde\xf6\xb4\x36\x97\x7b\xf2\xc6\x2d\x7e\x2c\x0e\xf4\xf1\x87\xf3\xd2\x2b\x7d\x02\x4e\xcd\xce\xcb\xd9\xa4\x7c\xca\x78\x79\xf7\x71\xbe\xb0\x17\xd5\xcd\xbd\x31\xd7\xc5\xfe\xf2\xee\x3e\xc9\x93\xf3\x6f\x67\x3f\x9e\x14\x99\x17\xef\xf0\x6e\xa9\x39\x66\x65\xe1\x91\xaf\x0b\x31\xc5\x5e\xac\x3c\xc9\xa0\x82\x0e\xc5\xc8\x59\xf6\xc2\x90\x71\x9d\xb9\x90\x29\x53\xf2\x58\x81\x15\x2d\x3d\xc8\x60\x45\x94\x5c\x3a\x92\x3d\x96\xc2\xd6\x64\x1c\xee\x85\x1f\x36\x8b\x96\x58\xe6\x70\x44\x49\x77\x62\x7b\x31\x49\x7f\x33\xe9\xd2\xf0\xba\x9d\x68\xa8\x10\x53\xe0\xdc\x14\x6b\xa8\x96\x60\x51\x37\x04\x5c\xc4\x50\x2a\xdf\x2f\x63\xb9\x12\x3c\xf0\xa6\xd8\xa4\x8f\x10\xe5\x72\xeb\xca\x8c\xf6\x20\xb5\xb0\xdb\xdd\xe1\xfe\xe6\x90\x26\xfc\xc0\xa6\xc9\xa4\xf4\xde\xe8\x8d\x0c\xdd\x02\xef\xb8\x79\x93\x24\x4a\x20\x66\x94\x82\xc2\x09\x8e\x11\x07\x0f\x1b\xb8\x09\xde\xe1\x3d\x0c\x36\x11\x7e\x8a\x7f\xed\xbc\x31\x02\x2b\x21\x10\xab\x02\x34\x17\x7c\x8a\x63\x50\x8d\x6d\x8b\x36\x79\x5b\xa3\xb6\xa1\x06\xa9\x35\x35\x2a\x40\xf7\xc9\x38\x1b\x18\xad\x6a\x1c\xdd\x76\xe9\x68\xa8\x64\x02\xcd\xb5\xa5\xa4\xb1\x7b\xc7\x55\x32\xa3\x83\xf6\xf8\x9f\x65\x4a\x49\x27\xe5\x00\x83\x1d\x5d\x97\x16\x34\xef\xbf\x26\x82\xa3\x85\x60\xde\xd8\x85\x6c\xfe\x29\x81\x57\xa5\x24\x5c\x56\x3b\x95\x95\x7c\x2b\xda\xce\xb1\x7d\x3d\xb6\x05\x1b\x16\xbc\x54\xaf\xec\xfb\xeb\xa5\xa1\xda\xd5\x5e\xc9\x88\x42\x9f\x9c\x7b\x2c\xc1\x0a\x1c\xcd\xdb\xb1\x49\x8e\x12\x25\xdf\xf3\xd0\xc6\xe6\x38\xba\x34\x36\x7f\xcb\x9a\x92\x52\xed\xf2\x6b\x1a\x11\x09\x35\x54\x2f\x0c\xfa\x3e\x34\x90\x80\x12\x0d\xed\xf4\xbd\x2f\x80\x2e\x6d\xf4\xfa\x37\xa2\xe9\x5e\xb7\xf3\xfa\x31\x18\x51\xd2\xc0\xb4\x18\x68\xff\x09\x01\xf2\xa6\x46\x85\x35\x99\x60\x1e\xc5\xc6\x22\x06\x8a\x95\x0a\xbc\xd4\x09\xaa\x5a\x5b\xd4\x30\x74\x48\x6a\x94\x18\x05\x3a\x09\x29\x29\x9a\x30\x6d\xac\x71\xf4\x59\xf3\xc2\x48\xed\x1d\x25\xe9\x38\x1a\xd1\x9e\xef\xdb\xba\x6e\x26\x43\xa9\xde\x12\xb4\x1d\x5e\xcc\x3a\x1d\xb7\xe2\xf4\x4d\x6d\xd0\xbd\xfe\x6f\x7f\xce\x76\x1f\xa4\xec\xcd\xbe\x7c\xcb\x7e\x3f\xfb\x26\x97\x1f\xf6\x27\x8f\x55\x9d\xcd\xbf\xc6\xa7\xd9\xd5\x57\xb8\x78\x88\xcb\xbb\xc5\xea\xef\xd5\xf7\x6b\x3d\x3b\x3f\x9a\xa8\xfd\x7c\x76\x77\x79\x56\x9c\x7c\xcc\x4f\x66\xc7\x87\x4f\x27\x97\x67\xec\xfa\x78\x72\xbb\x82\xff\xee\xcb\xc3\x5e\xd9\xb5\x48\x4a\xba\x67\x7d\xbd\x46\x42\xf3\xa6\x64\xff\x06\x00\x00\xff\xff\x24\xb4\x1e\x2a\x02\x08\x00\x00")

func templatesIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTmpl,
		"templates/index.tmpl",
	)
}

func templatesIndexTmpl() (*asset, error) {
	bytes, err := templatesIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tmpl", size: 2050, mode: os.FileMode(420), modTime: time.Unix(1482717047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNormsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x6b\x6f\xdb\x36\x17\xfe\x9e\x5f\xc1\x97\x2d\xde\x38\xe8\x2c\x36\x4e\xb6\xb4\x99\xac\xa1\x4b\xba\x5c\xda\x26\x69\x9c\x3a\xcd\x86\x7d\x38\x26\x29\x99\x0e\x45\xaa\x24\xa5\x58\x33\xfc\xdf\x07\x4a\x96\x6d\xb9\x69\x50\x60\x40\x0d\x24\x22\xcf\x8d\xcf\xb9\x90\xe7\xcc\x66\x88\xf1\x58\x28\x8e\xb0\xd2\x26\xb5\x81\x4b\x33\x89\xd1\x7c\xbe\x15\x8e\x5d\x2a\xa3\x2d\x84\xc2\x31\x07\xe6\x17\x08\x85\x4e\x38\xc9\xa3\xd9\x0c\x05\xd5\x0a\xcd\xe7\x21\xa9\x69\x35\xff\x7f\xdd\x2e\x7a\x0f\x8e\x5b\x87\xa8\x4e\x33\x21\x39\x43\xa0\x18\x4a\x85\x12\xb1\xe0\x0c\x1d\x0d\x06\xa8\xdb\x5d\x48\x4b\xa1\xee\x91\xe1\xb2\x8f\xad\x2b\x25\xb7\x63\xce\x1d\x46\x63\xc3\xe3\x3e\x1e\x3b\x97\xd9\x43\x42\x52\x98\x52\xa6\x82\x91\xd6\xce\x3a\x03\x99\xdf\x50\x9d\x92\x25\x81\xec\x05\x7b\xc1\x01\xa1\xd6\xae\x68\x41\x2a\x54\x40\xad\xc5\x48\x28\xc7\x13\x23\x5c\xd9\xc7\x76\x0c\x7b\xaf\xf6\xbb\xbf\x0f\xef\x84\x18\x9c\xfd\xc1\xdf\xed\xb2\x93\xf4\xfc\xfa\xcd\x7d\x49\xf3\xd3\x37\xa7\xd7\xc9\x5e\xef\x32\xfd\x44\x1f\x1e\x0e\xb4\xda\xbb\xbe\x63\xc9\xfe\x10\x5e\x5c\xa5\x83\x1b\xfb\x0f\x79\xf7\xcb\xab\x62\xc4\xde\x4e\xc6\xfb\x39\x46\xd4\x68\x6b\xb5\x11\x89\x50\x7d\x0c\x4a\xab\x32\xd5\xb9\xc5\xd1\xd6\x2a\x06\x97\x99\x13\x5a\x81\x44\x6e\xcc\x53\xfe\x03\x3c\xee\x56\x07\x3d\xe5\xb7\x39\x2d\xf5\xc5\xae\xb8\xb6\xc3\xcf\xc3\x7d\x75\xfc\xf2\x3c\x77\x52\x9d\x80\x95\x47\xe7\xf9\xd1\x41\xfe\x30\x61\xf9\xed\xeb\xc1\xd0\xbc\x2f\xae\xef\xb4\xbe\xca\x7a\xa3\xdb\xbb\x24\x4d\xce\x3f\x9e\x7d\x7e\x90\x64\x90\x3d\xe1\x77\xe5\x9a\xa5\x46\x64\x0e\xb9\x32\xe3\x7d\xec\xf8\xd4\x91\x09\x14\x50\x53\x31\xb2\x86\xae\x3c\xa4\x4c\x4d\x6c\x40\xa5\xce\x59\x2c\xc1\xf0\xca\x3d\x98\xc0\x94\x48\x31\xb2\x64\xf2\x25\xe7\xa6\x24\x7b\xc1\x6e\xf0\x72\xb1\xa9\x1c\x9b\x58\x1c\x85\xa4\xb6\x58\x15\x26\x69\x2a\x33\x1c\x69\x56\x56\x0b\x05\x05\xa2\x12\xac\xed\x63\x05\xc5\x08\x0c\xaa\x3f\x5d\xc6\x63\xc8\xa5\x6b\xb6\xb1\x98\x72\xd6\x75\x3a\x5b\xc0\x47\x28\x64\x62\xa9\x4a\xb5\x72\x20\x14\x37\x4b\x6e\x9b\xbf\x30\xe2\x8f\x6f\xc9\x78\x24\xb9\x73\x5a\x2d\xc2\x50\x6f\xf0\x86\x9a\xd3\x49\x22\x39\xa2\x5a\x4a\xc8\x2c\x67\x18\x31\x70\xb0\x20\xfb\xc3\x6b\x7a\x43\x06\x93\x70\xd7\xc7\xcf\x6a\x6d\x8c\xc0\x08\xe8\xf2\x69\x06\x8a\x71\xd6\xc7\x31\x48\x2f\x5b\x51\x3d\x6e\xa3\xe5\xf2\xa8\x16\x34\x9f\xa3\x0c\x54\x03\xc6\x9a\xae\x56\xb2\xc4\xd1\x4d\x0d\x47\x41\x21\x12\xf0\x65\x1b\x12\x2f\xf7\x84\xaa\xa0\x5a\x75\x2b\xf3\x3f\x4a\x34\x24\x75\x28\x5b\x34\xd8\x88\xeb\xc8\x80\x62\xcd\x6d\x22\x38\x1a\x72\xea\xb4\x19\x0a\xff\x3f\x24\xb0\x96\x4a\xc2\x44\xb1\x91\x59\xc1\x96\x41\xdb\x30\xdb\xe4\x63\x99\xb0\x76\xc2\x73\xb9\x26\xdf\x94\x97\x82\x62\x33\xf6\x52\x44\x21\x34\xe0\xec\x97\x1c\x0c\xc7\xd1\xa0\xfa\x7a\x70\x21\x91\xe2\x29\x0d\xff\x3a\xe3\xe8\x42\x9b\xf4\x31\xe9\x90\xe4\x72\xd3\x3f\xff\x10\x91\x40\x41\xb1\xf2\xa0\x79\x87\x5a\x21\x08\x89\x82\x6a\xf9\xd4\x0d\x08\x47\x26\x5a\xff\xdb\xda\xb8\x12\xdb\x46\x3f\x6c\xaf\x21\x18\xf7\x2a\xac\x36\x24\xe3\xde\x1a\x39\x8b\x40\x21\xae\x58\xa6\x85\x72\x28\xd6\x06\x51\x90\x34\x97\xe0\x84\x4a\x10\x13\x71\xcc\x0d\x57\x0e\x55\xbd\x08\xe9\x18\x01\x2a\x78\x9d\xbf\x6c\xcd\x4c\x03\x60\x61\xf3\xad\x72\xdc\xa0\x52\xe7\x66\x21\x8d\xc0\x22\xf0\x1d\x28\x05\x64\x79\xc6\x0d\x38\xce\x90\x75\x46\xa8\xe4\xb0\x6d\xca\xbf\x54\x60\x78\x53\x4b\xdb\xb1\x36\x69\x73\x8f\xb6\xab\xaa\xa8\x4d\xfa\xaa\x6c\x64\xbf\x85\xc4\x72\xc9\xa9\xab\x94\xee\x85\x2f\xc5\xc7\x6c\x6e\x24\x59\x57\x9d\x02\xd5\xaa\x9c\xa1\x02\x64\xce\xfb\x58\xee\xe2\x48\xee\x86\xa4\x66\x3f\xae\xd3\x88\xf6\x70\x24\x7b\xdf\x27\x2a\x54\x2c\x94\x70\x25\x8e\x96\xcb\xaf\x15\x43\x52\xa3\xf9\x96\x9b\x8b\x27\xce\xbb\x69\xf3\x51\x2a\xdc\xd2\xd1\x91\x53\x68\xe4\x54\x57\x26\xdb\xd1\xa0\x62\x7d\x7d\x71\xc3\xb1\x79\xe4\xea\x19\x6e\x73\xe9\x70\xf4\xd7\xdf\xad\xca\xac\x96\xeb\xfd\x65\xa5\xfa\xbc\x83\x9f\x2d\x8e\xdf\x09\xa8\x14\xf4\xbe\x13\xe7\x8a\x7a\x57\x3a\x7c\x07\xcd\x5a\x71\xe0\x41\x66\x78\xc1\x95\x3b\xae\xdb\x40\x67\xe7\xd7\x16\x9f\x6a\x65\xb5\xe4\x81\xd4\x49\xa7\x1a\x84\x7e\x2b\xfa\x18\xbd\xa8\x0e\x59\xe4\x7f\x27\x28\x40\x76\x76\xd0\x0b\x84\xff\xef\xb3\xbb\xe4\x57\xa9\x5e\x70\x9f\x30\xbb\x12\xdd\x10\x2a\xc0\x54\x2f\x3d\xea\xa3\xe7\x81\xef\x82\x9d\x36\x76\xff\xc3\xbe\x9f\xe0\x43\x84\xaf\x2e\x07\x37\xf8\xa7\xaf\xf9\xb9\x91\x9e\xfd\x1f\xa0\x3f\x62\xd4\xe6\x94\x72\x6b\xf1\x21\x5a\x46\xb6\x46\xba\x19\xde\xf5\x9c\x2c\x32\xb9\x13\xf0\x34\x73\x65\x67\x27\x80\x2c\xe3\x8a\x75\xce\x07\x97\x17\x41\x7d\x05\x45\x5c\x76\xbc\x9d\xcd\x48\xf8\xdf\xbc\x45\x99\xaf\x49\x34\xeb\xd5\x08\xb0\x2c\x95\x66\xf8\x68\x4d\x19\xdf\x3b\x47\x4d\x36\x07\xc7\xc9\xa3\xf3\xd3\x0d\xfd\xf9\xec\xa3\x18\xbd\xec\x1d\x7c\x29\xca\xc9\xe0\x43\x7c\x3a\xb9\xfc\x00\xef\xef\xe3\xfc\x76\x38\xfd\x73\xfa\xe9\x4a\x1d\x9d\xbf\x39\x90\xbd\xf4\xe8\xf6\xe2\x2c\x3b\x79\x9d\x9e\x1c\x1d\xbf\x7a\x38\xb9\x38\xa3\x57\xc7\x07\x37\x53\xf8\xf6\xfc\xd4\x9e\x69\xea\x51\x26\x24\xf5\xf8\x3d\x9b\xf9\xe7\x12\xcd\xe7\xff\x06\x00\x00\xff\xff\xa2\xdf\xf4\x11\xa9\x0b\x00\x00")

func templatesNormsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesNormsTmpl,
		"templates/norms.tmpl",
	)
}

func templatesNormsTmpl() (*asset, error) {
	bytes, err := templatesNormsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/norms.tmpl", size: 2985, mode: os.FileMode(420), modTime: time.Unix(1482717047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSquareTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdb\x72\xdb\x36\x13\xbe\xcf\x53\xe0\x47\x32\x63\x69\xf2\x8b\x48\x6c\xb7\x4e\x5c\x4a\x9d\xd4\x4e\x7d\x48\x62\x3b\x96\x23\xc7\xed\xf4\x62\x05\x80\x14\x64\x10\xa0\x01\x90\x12\xab\xd1\xbb\x77\xc0\x83\x24\x2a\x8e\xdb\xab\x70\x46\x22\xb0\xd8\xf3\x7e\xd8\xe5\x62\x81\x18\x8f\x84\xe2\x08\xdb\x87\x0c\x0c\x0f\x5c\x92\x4a\x8c\x96\xcb\x67\xe1\xc4\x25\x72\xf0\x0c\xa1\x70\xc2\x81\xf9\x05\x42\xa1\x13\x4e\xf2\xc1\x62\x81\x82\x72\x85\x96\xcb\x90\x54\xb4\xea\xfc\x7f\xbd\x1e\xfa\x08\x8e\x5b\x87\xa8\x4e\x52\x21\x39\x43\xa0\x18\x4a\x84\x12\x91\xe0\x0c\x1d\x0d\x87\xa8\xd7\xab\xb9\xa5\x50\xf7\xc8\x70\xd9\xc7\xd6\x15\x92\xdb\x09\xe7\x0e\xa3\x89\xe1\x51\x1f\x4f\x9c\x4b\xed\x21\x21\x09\xcc\x29\x53\xc1\x58\x6b\x67\x9d\x81\xd4\x6f\xa8\x4e\xc8\x8a\x40\xf6\x82\xbd\xe0\x80\x50\x6b\xd7\xb4\x20\x11\x2a\xa0\xd6\x62\x24\x94\xe3\xb1\x11\xae\xe8\x63\x3b\x81\xbd\x37\xfb\xbd\xdf\x46\x77\x42\x0c\xcf\x7e\xe7\x1f\x5e\xb3\x93\xe4\xfc\xfa\xdd\x7d\x41\xb3\xd3\x77\xa7\xd7\xf1\xde\xee\x65\xf2\x85\xce\x66\x07\x5a\xed\x5d\xdf\xb1\x78\x7f\x04\x2f\xaf\x92\xe1\x8d\xfd\x9b\x7c\xf8\xf9\x4d\x3e\x66\xef\xa7\x93\xfd\x0c\x23\x6a\xb4\xb5\xda\x88\x58\xa8\x3e\x06\xa5\x55\x91\xe8\xcc\xe2\xc1\xb3\x75\x0e\x2e\x53\x27\xb4\x02\x89\xdc\x84\x27\xfc\x07\x44\xdc\x2b\x0d\x3d\x15\xb7\x39\x2d\xf4\xc5\x6b\x71\x6d\x47\x5f\x47\xfb\xea\xf8\xd5\x79\xe6\xa4\x3a\x01\x2b\x8f\xce\xb3\xa3\x83\x6c\x36\x65\xd9\xed\xdb\xe1\xc8\x7c\xcc\xaf\xef\xb4\xbe\x4a\x77\xc7\xb7\x77\x71\x12\x9f\x7f\x3e\xfb\x3a\x93\x64\x98\x3e\x11\x77\x19\x9a\xa5\x46\xa4\x0e\xb9\x22\xe5\x7d\xec\xf8\xdc\x91\x29\xe4\x50\x51\x31\xb2\x86\xae\x23\xa4\x4c\x4d\x6d\x40\xa5\xce\x58\x24\x3d\xe8\x7c\x78\x30\x85\x39\x91\x62\x6c\xc9\xf4\x21\xe3\xa6\x20\x7b\xc1\xeb\xe0\x55\xbd\x29\x03\x9b\x5a\x3c\x08\x49\xa5\xb1\x04\x26\x69\x90\x19\x8e\x35\x2b\xca\x85\x82\x1c\x51\x09\xd6\xf6\xb1\x82\x7c\x0c\x06\x55\xaf\x1e\xe3\x11\x64\xd2\x35\xdb\x48\xcc\x39\xeb\x39\x9d\xd6\xee\x23\x14\x32\xb1\x12\xa5\x5a\x39\x10\x8a\x9b\xd5\x69\xfb\xbc\x56\xe2\xcd\xb7\x78\xbc\x27\x99\x73\x5a\xd5\x69\xa8\x36\x78\x4b\xcc\xe9\x38\x96\x1c\x51\x2d\x25\xa4\x96\x33\x8c\x18\x38\xa8\xc9\xde\x78\x45\x6f\xc8\x60\x62\xee\xfa\xf8\x79\x25\x8d\x11\x18\x01\x3d\x3e\x4f\x41\x31\xce\xfa\x38\x02\xe9\x79\x4b\xaa\xf7\xdb\x68\xb9\x32\xd5\x72\xcd\xd7\x28\x05\xd5\x38\x63\x4d\x4f\x2b\x59\xe0\xc1\x4d\xe5\x8e\x82\x5c\xc4\xe0\x61\x1b\x12\xcf\xf7\x84\xa8\xa0\x5a\xf5\x4a\xf5\x3f\x8a\x35\x24\x55\x2a\x5b\x34\xd8\xca\xeb\xd8\x80\x62\xcd\x6d\x22\x78\x30\xe2\xd4\x69\x33\x12\xfe\x3f\x24\xb0\x51\x4a\xc2\x44\xbe\x55\x59\xc1\x56\x49\xdb\x52\xdb\xd4\x63\x55\xb0\x76\xc1\x33\xb9\xc1\xdf\xc0\x4b\x41\xbe\x9d\x7b\x29\x06\x21\x34\xce\x55\xcd\x16\x0f\x86\xe5\xdb\x3b\x17\x12\x29\x9e\x92\x50\xda\x24\x78\x70\xa1\x4d\xf2\x18\x77\x48\x32\xb9\x1d\x9f\x6f\x44\x24\x50\x90\xaf\x23\x68\xfa\x50\x2b\x05\x21\x51\x50\x2e\x9f\xba\x01\xe1\xd8\x0c\x36\x7f\x75\xaf\x5b\x4b\xec\x18\x3d\xdb\xd9\x70\x61\xb2\xbb\x0a\x6e\xb2\xbb\x41\x4f\x07\xa0\x10\x57\x2c\xd5\x42\x39\x14\x69\x83\xca\x5c\x08\x15\xa3\xbc\xac\x97\x45\x5c\xf2\x84\x2b\x37\x13\x96\x87\x24\xdd\x90\xf5\x76\x37\x14\xbd\x57\x8e\x1b\x54\xe8\xcc\xd4\xa2\x08\x2c\x02\x3f\x78\x12\x40\x96\xa7\xdc\x80\xe3\x0c\x59\xe7\xb5\x1f\xb6\x55\xf9\x06\x05\x86\x37\x10\xda\x89\xb4\x49\x9a\xeb\xb3\x53\x82\xa1\x52\xe9\xc1\xd8\xf0\x7e\xcf\x93\xfa\xca\x7b\x21\x9b\x8d\x13\xe1\x1a\x04\xed\x8c\x9d\x42\x63\xa7\x7a\x32\xde\x19\x0c\xcb\xa3\x6f\x81\x1c\x4e\xcc\x23\x50\x34\xdc\x66\xd2\xe1\xc1\x9f\x7f\xb5\x2a\x55\x2e\x37\xfb\xed\x5a\xf4\x45\x07\x3f\xaf\xcd\x77\x03\x2a\x05\xbd\xef\x44\x99\xa2\xfe\x42\x77\x78\x17\x2d\x5a\xd8\xe2\x41\x6a\x78\xce\x95\x3b\xae\xda\x62\xa7\xfb\x4b\xeb\x9c\x6a\x65\xb5\xe4\x81\xd4\x71\xa7\xfe\x32\xf8\x35\xef\x63\xf4\xb2\x34\x53\xa7\xa6\x1b\xe4\x20\x3b\xdd\x2d\xd1\x1c\x4c\xd9\xb8\x50\x1f\xbd\x08\x7c\x53\xef\xb4\x4d\xfb\x07\xfb\xf6\x88\x0f\x11\xbe\xba\x1c\xde\xe0\xff\x7f\x7b\x9e\x19\xe9\x8f\xff\xc5\xf2\x23\x82\x36\xa3\x94\x5b\x8b\x0f\xd1\x2a\xf8\xca\x9b\xed\x0c\x6c\xa6\xad\x4e\x76\x37\xe0\x49\xea\x8a\x4e\x37\x80\x34\xe5\x8a\x75\xce\x87\x97\x17\x41\x05\x1f\x11\x15\x1d\xaf\x67\x3b\x5a\xff\x2c\x5b\x94\xe5\x06\x47\xb3\x5e\x4f\xad\x55\x35\x9b\x79\xd9\x1a\x8c\xff\x75\xf4\x4f\xb7\xbf\x75\xa6\x8f\x8e\xfc\x1b\xfa\xd3\xd9\x67\x31\x7e\xb5\x7b\xf0\x90\x17\xd3\xe1\xa7\xe8\x74\x7a\xf9\x09\x3e\xde\x47\xd9\xed\x68\xfe\xc7\xfc\xcb\x95\x3a\x3a\x7f\x77\x20\x77\x93\xa3\xdb\x8b\xb3\xf4\xe4\x6d\x72\x72\x74\xfc\x66\x76\x72\x71\x46\xaf\x8e\x0f\x6e\xe6\xf0\xfd\x91\xdf\x1e\xc3\xd5\xf4\x0d\x49\xf5\xc5\xb8\x58\xf8\xfb\x8d\x96\xcb\x7f\x02\x00\x00\xff\xff\x65\xe9\x5a\xd8\x5d\x0a\x00\x00")

func templatesSquareTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSquareTmpl,
		"templates/square.tmpl",
	)
}

func templatesSquareTmpl() (*asset, error) {
	bytes, err := templatesSquareTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/square.tmpl", size: 2653, mode: os.FileMode(420), modTime: time.Unix(1482717047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tmpl": templatesIndexTmpl,
	"templates/norms.tmpl": templatesNormsTmpl,
	"templates/square.tmpl": templatesSquareTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{templatesIndexTmpl, map[string]*bintree{}},
		"norms.tmpl": &bintree{templatesNormsTmpl, map[string]*bintree{}},
		"square.tmpl": &bintree{templatesSquareTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

